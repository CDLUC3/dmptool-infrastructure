AWSTemplateFormatVersion: '2010-09-09'

Description: 'Elastic container registry for DMP Tool build images'

Parameters:
  Env:
    Type: 'String'
    Default: 'dev'

  ECRLifecyclePolicyTagPrefix:
    Type: 'String'

Resources:
  # -----------------------------------------------------------
  # Elastic Container Repository (ECR) - Hosts the application's Docker images
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ECR.html
  # -----------------------------------------------------------
  EcrRepository:
    Type: 'AWS::ECR::Repository'
    DeletionPolicy: 'Retain'
    Properties:
      RepositoryName: !Ref AWS::StackName
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: !Sub >
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 1,
                  "tagStatus": "tagged",
                  "tagPrefixList": [
                    "${ECRLifecyclePolicyTagPrefix}"
                  ]
                },
                "description": "Ensure that we do not have more than 1 tagged version",
                "rulePriority": 1
              },
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 3,
                  "tagStatus": "untagged"
                },
                "description": "Only retain the last 3 versions",
                "rulePriority": 2
              }
            ]
          }

  # -----------------------------------------------------------
  # Elastic Container Repository (ECR) - Hosts the Data Migration CodeBuild image
  #  which is a standard Alpine image with the AWS CLI, MySQL and Docker installed
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ECR.html
  # -----------------------------------------------------------
  NodeJSMySQLRepository:
    Type: 'AWS::ECR::Repository'
    DeletionPolicy: 'Retain'
    Properties:
      RepositoryName: !Sub 'dmptool-${Env}/nodejs-mysql'
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: !Sub >
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 1,
                  "tagStatus": "tagged",
                  "tagPrefixList": [
                    "${ECRLifecyclePolicyTagPrefix}"
                  ]
                },
                "description": "Ensure that we do not have more than 1 tagged version",
                "rulePriority": 1
              },
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 3,
                  "tagStatus": "untagged"
                },
                "description": "Only retain the last 3 versions",
                "rulePriority": 2
              }
            ]
          }


  # -----------------------------------------------------------
  # Elastic Container Repository (ECR) - Hosts our customized AWS Firelens image.
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ECR.html
  #   and: https://github.com/aws/aws-for-fluent-bit
  # -----------------------------------------------------------
  AwsFirelensRepository:
    Type: 'AWS::ECR::Repository'
    DeletionPolicy: 'Retain'
    Properties:
      RepositoryName: !Sub 'dmptool/aws-firelens'
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: !Sub >
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 1,
                  "tagStatus": "tagged",
                  "tagPrefixList": [
                    "${ECRLifecyclePolicyTagPrefix}"
                  ]
                },
                "description": "Ensure that we do not have more than 1 tagged version",
                "rulePriority": 1
              },
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 3,
                  "tagStatus": "untagged"
                },
                "description": "Only retain the last 3 versions",
                "rulePriority": 2
              }
            ]
          }


Outputs:
  EcrRepositoryName:
    Value: !Ref EcrRepository

  EcrRepositoryARN:
    Value: !GetAtt EcrRepository.Arn

  EcrURIPrefix:
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com"

  EcrRepositoryURI:
    Value: !GetAtt EcrRepository.RepositoryUri

  NodeJSMySQLRepositoryName:
    Value: !Ref NodeJSMySQLRepository

  NodeJSMySQLRepositoryARN:
    Value: !GetAtt NodeJSMySQLRepository.Arn

  NodeJSMySQLURIPrefix:
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com"

  NodeJSMySQLRepositoryURI:
    Value: !GetAtt NodeJSMySQLRepository.RepositoryUri

  AwsFirelensRepositoryName:
    Value: !Ref AwsFirelensRepository

  AwsFirelensRepositoryARN:
    Value: !GetAtt AwsFirelensRepository.Arn

  AwsFirelensPrefix:
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com"

  AwsFirelensRepositoryURI:
    Value: !GetAtt AwsFirelensRepository.RepositoryUri
